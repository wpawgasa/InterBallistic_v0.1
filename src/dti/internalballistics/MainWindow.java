/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dti.internalballistics;

import com.apple.eawt.Application;
import dti.internalballistics.cad.CAD;
import dti.internalballistics.cad.OnClickAction;
import dti.internalballistics.cad.OnLoadAction;
import dti.internalballistics.cad.Point;
import dti.internalballistics.cad.SvgOnHoverAction;
import java.awt.Component;
import java.awt.Container;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatter;
import javax.swing.text.NumberFormatter;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.dom.svg.SVGDOMImplementation;
import org.apache.batik.swing.JSVGCanvas;
import org.apache.batik.swing.svg.SVGLoadEventDispatcherAdapter;
import org.apache.batik.swing.svg.SVGLoadEventDispatcherEvent;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.events.Event;
import org.w3c.dom.events.EventListener;
import org.w3c.dom.events.EventTarget;
import org.w3c.dom.svg.SVGDocument;
import org.w3c.dom.svg.SVGElement;
import sun.lwawt.LWToolkit;

/**
 *
 * @author amabird
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {

        //Application.getApplication().setDockIconImage(new ImageIcon(getClass().getResource("/dti/icon/InternalBallisticNew-Logo.png")).getImage());
        this.setIconImage(new ImageIcon(getClass().getResource("/dti/icon/InternalBallisticNew-Logo.png")).getImage());
        initComponents();
        setSpinner(rocketDiameterSp);
        setSpinner(rocketLengthSp);
        setSpinner(jSpinner3);
        setSpinner(outerDiameterSpinner);
        setSpinner(innerDiameterSpinner);
        setButtonGroup();
        drawCanvas.setDocumentState(JSVGCanvas.ALWAYS_DYNAMIC);
        drawCanvas.addSVGLoadEventDispatcherListener(new SVGLoadEventDispatcherAdapter() {
            public void svgLoadEventDispatchStarted(SVGLoadEventDispatcherEvent e) {

                //System.out.println("sssssss");
            }
        });

        setCanvas();

    }

    public void registerListeners(String id) {
        // Gets an element from the loaded document.
        Element elt = document.getElementById(id);

        EventTarget t = (EventTarget) elt;

        // Adds oldLengthSection 'onload' listener
        t.addEventListener("SVGLoad", new OnLoadAction(), false);

        // Adds oldLengthSection 'onclick' listener
        t.addEventListener("click", new EventListener() {

            @Override
            public void handleEvent(Event event) {
                Element target = (Element) event.getCurrentTarget();
                String sectionNo = target.getAttribute("id");

                for (SectionInfo section : sectionList) {

                    if (section.getSection_id().equalsIgnoreCase(sectionNo)) {
                        selectedSection = section;
                        target.setAttribute("stroke-width", "2");
                        selectedSomething = true;
                    } else {
                        Element elm = document.getElementById(section.getSection_id());
                        elm.setAttribute("stroke-width", "1");
                    }
                }
                setSectionInfoView();
            }
        }, false);

        //System.out
        //System.out.println("def");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        leftGeoPanel = new javax.swing.JPanel();
        rigthGeoPanel = new javax.swing.JPanel();
        mainTabbedPanel = new javax.swing.JTabbedPane();
        geometricTab = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        addSectionBT = new javax.swing.JButton();
        removeSectionBT = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        rocketDiameterSp = new javax.swing.JSpinner();

        rocketLengthSp = new javax.swing.JSpinner();
        //drawCanvas = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        rocketLengthSp1 = new javax.swing.JSpinner();
        rocketDiameterSp1 = new javax.swing.JSpinner();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        sectionPropertiesTabbedPanel = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        propellantTable = new javax.swing.JTable();
        addPropellantBt = new javax.swing.JButton();

        removePropellantBt = new javax.swing.JButton();
        propellantPanel = new javax.swing.JPanel();
        leftPanel = new javax.swing.JPanel();
        burningRateLB = new javax.swing.JLabel();
        burningRateTB = new javax.swing.JTextField();

        jLabel19 = new javax.swing.JLabel();
        pressureExponentLB = new javax.swing.JLabel();
        pressureExponentTB = new javax.swing.JTextField();
        densityLB = new javax.swing.JLabel();
        densityTB = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        alphaConstLB = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        alphaConstTB = new javax.swing.JTextField();
        gasConstLB = new javax.swing.JLabel();
        gasConstTB = new javax.swing.JTextField();
        gasTempLB = new javax.swing.JLabel();
        gasTempTB = new javax.swing.JTextField();
        heatRatioLB = new javax.swing.JLabel();
        heatRatioTB = new javax.swing.JTextField();
        maxBurntLB = new javax.swing.JLabel();
        maxBurntTB = new javax.swing.JTextField();
        savePropertiesBT = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        outerDiameterSpinner = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        circleToggleButton = new javax.swing.JToggleButton();
        wheelToggleButton = new javax.swing.JToggleButton();
        starToggleButton = new javax.swing.JToggleButton();
        hexaToggleButton = new javax.swing.JToggleButton();
        pentaToggleButton = new javax.swing.JToggleButton();
        eightStarToggleButton = new javax.swing.JToggleButton();
        //cadPanelShape = new javax.swing.JPanel();
        diameterInner = new javax.swing.JLabel();
        innerDiameterSpinner = new javax.swing.JSpinner();
        mmLabel = new javax.swing.JLabel();
        mmLabel1 = new javax.swing.JLabel();
        simulationTab = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jSpinner3 = new javax.swing.JSpinner();
        jSpinner4 = new javax.swing.JSpinner();
        jSpinner5 = new javax.swing.JSpinner();
        jSpinner6 = new javax.swing.JSpinner();
        jSpinner7 = new javax.swing.JSpinner();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadConfItem = new javax.swing.JMenuItem();
        saveConfItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        lengthLB = new javax.swing.JLabel();
        lengthSectionSpinner = new javax.swing.JSpinner();
        mmLengthLabel = new javax.swing.JLabel();
        startBurningDistanceLb = new javax.swing.JLabel();
        startBurningDistanceTb = new javax.swing.JTextField();
        zoomInPropellantBt = new javax.swing.JButton();
        zoomOutPropellantBt = new javax.swing.JButton();

        diameterSpinnerNumberModel = new SpinnerNumberModel(0.0, -1000.0, 1000.0, 0.1);
        lengthSpinnerNumberModel = new SpinnerNumberModel(0.0, -1000.0, 1000.0, 0.1);
        rocketDiameterSp = new JSpinner(diameterSpinnerNumberModel);
        rocketLengthSp = new JSpinner(lengthSpinnerNumberModel);

        diameterSectionSpinnerNumberModel = new SpinnerNumberModel(0.0, -1000.0, 1000.0, 0.1);
        lengthSectionSpinnerNumberModel = new SpinnerNumberModel(0.0, -1000.0, 1000.0, 0.1);
        innerDiameterSectionSpinnerNumberModel = new SpinnerNumberModel(0.0, -1000.0, 1000.0, 0.1);
        outerDiameterSpinner = new JSpinner(diameterSectionSpinnerNumberModel);
        innerDiameterSpinner = new JSpinner(innerDiameterSectionSpinnerNumberModel);
        lengthSectionSpinner = new JSpinner(lengthSectionSpinnerNumberModel);

//        sectionPropertiesTabbedPanel.setEnabled(false);
//        addPropellantBt.setEnabled(false);
//        removePropellantBt.setEnabled(false);
//        burningRateTB.setEnabled(false);
//        pressureExponentTB.setEnabled(false);
//        densityTB.setEnabled(false);
//        alphaConstTB.setEnabled(false);
//        gasTempTB.setEnabled(false);
//        gasConstTB.setEnabled(false);
//        heatRatioTB.setEnabled(false);
//        maxBurntTB.setEnabled(false);
//        savePropertiesBT.setEnabled(false);
//        propellantTable.setEnabled(false);
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Rocket Diameter :");

        jLabel2.setText("Rocket Length :");

        addSectionBT.setText("Add Section");
        addSectionBT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addSectionBTMouseClicked(evt);
            }
        });
        addSectionBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSectionBTActionPerformed(evt);
            }
        });

        removeSectionBT.setText("Remove Section");

        removeSectionBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSectionBTActionPerformed(evt);
            }
        });
        jLabel3.setText("mm");

        jLabel4.setText("mm");

        rocketDiameterSp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rocketDiameterSpStateChanged(evt);
            }
        });

        rocketLengthSp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rocketLengthSpStateChanged(evt);
            }
        });

        javax.swing.GroupLayout drawCanvasLayout = new javax.swing.GroupLayout(drawCanvas);
        drawCanvas.setLayout(drawCanvasLayout);
        drawCanvasLayout.setHorizontalGroup(
                drawCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 650, Short.MAX_VALUE)
        );
        drawCanvasLayout.setVerticalGroup(
                drawCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel14.setText("Igniter Mass :");

        jLabel15.setText("Igniter burn rate :");

        rocketLengthSp1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rocketLengthSp1StateChanged(evt);
            }
        });

        rocketDiameterSp1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rocketDiameterSp1StateChanged(evt);
            }
        });

        jLabel16.setText("kg");

        jLabel17.setText("kg/s");

        propellantTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Layer", "Name", "Material"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        propellantTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                propellantTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(propellantTable);

        addPropellantBt.setText("Add");
        addPropellantBt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addPropellantBtMouseClicked(evt);
            }
        });

        removePropellantBt.setText("Remove");

        removePropellantBt.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSectionBTActionPerformed(evt);
            }
        });
        burningRateLB.setText("Burning rate (m/s) ");

        jLabel19.setText("/1000 ");

        pressureExponentLB.setText("Pressure Exponent");

        densityLB.setText("Density (kg/m^3)");

        jLabel22.setText("*1000 ");

        alphaConstLB.setText("Alpha erosive burning const.");

        jLabel24.setText("/10^7");

        gasConstLB.setText("Individual gas const. (J/(kg*K))");

        gasTempLB.setText("Gas temperature (K)");

        heatRatioLB.setText("Heat Capacity Ratio");

        maxBurntLB.setText("Max. Burning Distance (mm)");
        
        startBurningDistanceLb.setText("Start Burning Distance (mm)");

        javax.swing.GroupLayout propellantPanelLayout = new javax.swing.GroupLayout(propellantPanel);
        propellantPanel.setLayout(propellantPanelLayout);
        propellantPanelLayout.setHorizontalGroup(
                propellantPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(propellantPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(propellantPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, propellantPanelLayout.createSequentialGroup()
                                        .addComponent(heatRatioLB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(heatRatioTB, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, propellantPanelLayout.createSequentialGroup()
                                        .addComponent(gasConstLB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(gasConstTB, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(propellantPanelLayout.createSequentialGroup()
                                        .addComponent(gasTempLB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(gasTempTB, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(propellantPanelLayout.createSequentialGroup()
                                        .addComponent(maxBurntLB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(maxBurntTB, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(propellantPanelLayout.createSequentialGroup()
                                        .addComponent(startBurningDistanceLb)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(startBurningDistanceTb, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, propellantPanelLayout.createSequentialGroup()
                                        .addComponent(pressureExponentLB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(pressureExponentTB, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, propellantPanelLayout.createSequentialGroup()
                                        .addComponent(burningRateLB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(burningRateTB, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, propellantPanelLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(densityTB, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(propellantPanelLayout.createSequentialGroup()
                                        .addComponent(densityLB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, propellantPanelLayout.createSequentialGroup()
                                        .addComponent(alphaConstLB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(alphaConstTB, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(propellantPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel22)
                                .addComponent(jLabel19)
                                .addComponent(jLabel24))
                        .addGap(0, 0, Short.MAX_VALUE))
        );
        propellantPanelLayout.setVerticalGroup(
                propellantPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(propellantPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(propellantPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(burningRateTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel19)
                                .addComponent(burningRateLB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(propellantPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(pressureExponentTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(pressureExponentLB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(propellantPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(densityLB)
                                .addComponent(densityTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel22))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(propellantPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(alphaConstLB)
                                .addComponent(alphaConstTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel24))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(propellantPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(gasTempLB)
                                .addComponent(gasTempTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(propellantPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(gasConstLB)
                                .addComponent(gasConstTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(propellantPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(heatRatioLB)
                                .addComponent(heatRatioTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(propellantPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(maxBurntTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(maxBurntLB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(propellantPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(startBurningDistanceTb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(startBurningDistanceLb))
                        .addContainerGap(12, Short.MAX_VALUE))
        );

        savePropertiesBT.setText("Save");
        savePropertiesBT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                savePropertiesBTMouseClicked(evt);
            }
        });
        savePropertiesBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePropertiesBTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(addPropellantBt)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(removePropellantBt))
                                .addComponent(propellantPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(savePropertiesBT))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, 150, 200, 250)
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(addPropellantBt)
                                .addComponent(removePropellantBt))
                        .addGap(15, 15, 15)
                        .addComponent(propellantPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(savePropertiesBT)
                        .addGap(0, 6, Short.MAX_VALUE))
        );

        sectionPropertiesTabbedPanel.addTab("Propellant Properties", jPanel1);

        jLabel28.setText("Outer Diameter :");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Shape :"));

        circleToggleButton.setBackground(new java.awt.Color(0, 0, 0));
        circleToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dti/icon/DTICircleIcon.png"))); // NOI18N
        circleToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                circleToggleButtonItemStateChanged(evt);
            }
        });

        wheelToggleButton.setBackground(new java.awt.Color(0, 0, 0));
        wheelToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dti/icon/DTIWheelIcon.png"))); // NOI18N
        wheelToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                wheelToggleButtonItemStateChanged(evt);
            }
        });

        starToggleButton.setBackground(new java.awt.Color(0, 0, 0));
        starToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dti/icon/DTIStarIcon.png"))); // NOI18N
        starToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                starToggleButtonItemStateChanged(evt);
            }
        });

        hexaToggleButton.setBackground(new java.awt.Color(0, 0, 0));
        hexaToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dti/icon/DTIHexagonIcon.png"))); // NOI18N
        hexaToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hexaToggleButtonItemStateChanged(evt);
            }
        });

        pentaToggleButton.setBackground(new java.awt.Color(0, 0, 0));
        pentaToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dti/icon/DTIPentagonIcon.png"))); // NOI18N
        pentaToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pentaToggleButtonItemStateChanged(evt);
            }
        });

        eightStarToggleButton.setBackground(new java.awt.Color(0, 0, 0));
        eightStarToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dti/icon/DTIEightStarIcon.png"))); // NOI18N
        eightStarToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                eightStarToggleButtonItemStateChanged(evt);
            }
        });
        
        zoomInPropellantBt.setText("+");
        zoomOutPropellantBt.setText("-");
        
        zoomInPropellantBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                 zoomInButtonActionPerformed(evt);
            }
        });
         zoomOutPropellantBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                 zoomOutButtonActionPerformed(evt);
            }
        });
        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(pentaToggleButton)
                                .addComponent(circleToggleButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(wheelToggleButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(starToggleButton))
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(hexaToggleButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(eightStarToggleButton)))
                        .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(wheelToggleButton)
                                .addComponent(circleToggleButton)
                                .addComponent(starToggleButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(pentaToggleButton)
                                .addComponent(hexaToggleButton)
                                .addComponent(eightStarToggleButton))
                        .addContainerGap(16, Short.MAX_VALUE))
        );

        

        diameterInner.setText("Inner Diameter:");

        innerDiameterSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                innerDiameterSpinStateChanged(evt);
            }
        });

        outerDiameterSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                outerDiameterSpinStateChanged(evt);
            }
        });

        lengthSectionSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lengthSpinStateChanged(evt);
            }
        });

        mmLabel.setText("mm");

        mmLabel1.setText("mm");

        lengthLB.setText("Length :");

        mmLengthLabel.setText("mm");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel28)
                                        .addGap(13, 13, 13)
                                        .addComponent(outerDiameterSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(mmLabel1)
                                        .addGap(13, 13, 13)
                                        .addComponent(diameterInner)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(innerDiameterSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(mmLabel)
                                        .addGap(13, 13, 13).addComponent(lengthLB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lengthSectionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(mmLengthLabel))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(zoomInPropellantBt)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(zoomOutPropellantBt))
                                        .addComponent(cadPanelShape, 320,320, 320)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel28)
                                .addComponent(outerDiameterSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(diameterInner)
                                .addComponent(innerDiameterSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(mmLabel)
                                .addComponent(mmLabel1)
                                .addComponent(lengthLB)
                                .addComponent(lengthSectionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(mmLengthLabel))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(zoomInPropellantBt)
                                .addComponent(zoomOutPropellantBt))
                        .addGap(10, 10, 10)
                        .addComponent(cadPanelShape, 320,320, 320)
                        .addGap(10, 10, 10)
                        .addContainerGap(10, Short.MAX_VALUE))
        );

        sectionPropertiesTabbedPanel.addTab("Propellant Geometric", jPanel2);

        javax.swing.GroupLayout geometricTabLayout = new javax.swing.GroupLayout(geometricTab);
        geometricTab.setLayout(geometricTabLayout);
        geometricTabLayout.setHorizontalGroup(
            geometricTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(geometricTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(leftGeoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rigthGeoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        geometricTabLayout.setVerticalGroup(
            geometricTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, geometricTabLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(geometricTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(leftGeoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rigthGeoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        

        mainTabbedPanel.addTab("Geometric", geometricTab);

        jLabel5.setText("Guess Pressure :");

        jLabel6.setText("Specific Impulse :");

        jLabel7.setText("Stop Pressure :");

        jLabel8.setText("Stop Time :");

        jLabel9.setText("Number of Segments :");

        jLabel10.setText("PSI");

        jLabel11.setText("s");

        jLabel12.setText("PSI");

        jLabel13.setText("s");

        jButton3.setText("Simulate");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout simulationTabLayout = new javax.swing.GroupLayout(simulationTab);
        simulationTab.setLayout(simulationTabLayout);
        simulationTabLayout.setHorizontalGroup(
                simulationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(simulationTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(simulationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(simulationTabLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jButton3))
                                .addGroup(simulationTabLayout.createSequentialGroup()
                                        .addGroup(simulationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(simulationTabLayout.createSequentialGroup()
                                                        .addComponent(jLabel9)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                                                        .addComponent(jSpinner7, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(simulationTabLayout.createSequentialGroup()
                                                        .addGroup(simulationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(jLabel5)
                                                                .addComponent(jLabel6)
                                                                .addComponent(jLabel7)
                                                                .addComponent(jLabel8))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addGroup(simulationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(jSpinner4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(jSpinner3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(jSpinner5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(jSpinner6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(simulationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel12)
                                                .addComponent(jLabel10)
                                                .addComponent(jLabel11)
                                                .addComponent(jLabel13))))
                        .addContainerGap(798, Short.MAX_VALUE))
        );
        simulationTabLayout.setVerticalGroup(
                simulationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(simulationTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(simulationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(jLabel10)
                                .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(simulationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(jLabel11)
                                .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(simulationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel7)
                                .addComponent(jLabel12)
                                .addComponent(jSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(simulationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(jLabel13)
                                .addComponent(jSpinner6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(simulationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9)
                                .addComponent(jSpinner7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(jButton3)
                        .addContainerGap(539, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout leftGeoPanelLayout = new javax.swing.GroupLayout(leftGeoPanel);
        leftGeoPanel.setLayout(leftGeoPanelLayout);
        
        leftGeoPanelLayout.setHorizontalGroup(
                leftGeoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(leftGeoPanelLayout.createSequentialGroup()
                        .addGroup(leftGeoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(leftGeoPanelLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(leftGeoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel1)
                                                .addComponent(jLabel2)
                                                .addComponent(addSectionBT))
                                        .addGap(18, 18, 18)
                                        .addGroup(leftGeoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(removeSectionBT)
                                                .addGroup(leftGeoPanelLayout.createSequentialGroup()
                                                        .addGroup(leftGeoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(leftGeoPanelLayout.createSequentialGroup()
                                                                        .addComponent(rocketLengthSp, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(jLabel4))
                                                                .addGroup(leftGeoPanelLayout.createSequentialGroup()
                                                                        .addComponent(rocketDiameterSp, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(jLabel3)))
                                                        .addGap(62, 62, 62)
                                                        .addGroup(leftGeoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(jLabel14)
                                                                .addComponent(jLabel15))
                                                        .addGap(18, 18, 18)
                                                        .addGroup(leftGeoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addGroup(leftGeoPanelLayout.createSequentialGroup()
                                                                        .addComponent(rocketLengthSp1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(jLabel17))
                                                                .addGroup(leftGeoPanelLayout.createSequentialGroup()
                                                                        .addComponent(rocketDiameterSp1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(jLabel16))))))
                                .addGroup(leftGeoPanelLayout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(drawCanvas, 650, 650, 650)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        leftGeoPanelLayout.setVerticalGroup(
                leftGeoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(leftGeoPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(leftGeoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(leftGeoPanelLayout.createSequentialGroup()
                                        .addGroup(leftGeoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel1)
                                                .addComponent(jLabel3)
                                                .addComponent(rocketDiameterSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(leftGeoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel2)
                                                .addComponent(jLabel4)
                                                .addComponent(rocketLengthSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(leftGeoPanelLayout.createSequentialGroup()
                                        .addGroup(leftGeoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel14)
                                                .addComponent(jLabel16)
                                                .addComponent(rocketDiameterSp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(leftGeoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel15)
                                                .addComponent(jLabel17)
                                                .addComponent(rocketLengthSp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                )
                        .addGap(18, 18, 18)
                        .addGroup(leftGeoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(addSectionBT)
                                .addComponent(removeSectionBT))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(drawCanvas, 600, 600, 600)
                        .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout rightGeoPanelLayout = new javax.swing.GroupLayout(rigthGeoPanel);
        rigthGeoPanel.setLayout(rightGeoPanelLayout);
        rightGeoPanelLayout.setHorizontalGroup(
            rightGeoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightGeoPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(sectionPropertiesTabbedPanel, 450, 600, 750)
                .addContainerGap(79, Short.MAX_VALUE))
        );
        rightGeoPanelLayout.setVerticalGroup(
            rightGeoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightGeoPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(sectionPropertiesTabbedPanel, 600, 720, 750)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        
        
        mainTabbedPanel.addTab("Simulation", simulationTab);

        fileMenu.setText("File");

        loadConfItem.setText("Load Configuration");
        loadConfItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadConfItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadConfItem);

        saveConfItem.setText("Save Configuration");
        saveConfItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveConfItem);

        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitItem);

        mainMenuBar.add(fileMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mainTabbedPanel)
                        .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mainTabbedPanel)
                        .addContainerGap())
        );

        enableComponents(sectionPropertiesTabbedPanel, false);
        pack();
    }// </editor-fold>                        

    public void setButtonGroup() {

        ButtonGroup buttonGroup = new ButtonGroup();
        buttonGroup.add(circleToggleButton);
        buttonGroup.add(wheelToggleButton);
        buttonGroup.add(starToggleButton);
        buttonGroup.add(pentaToggleButton);
        buttonGroup.add(hexaToggleButton);
        buttonGroup.add(eightStarToggleButton);

    }

    public void setCanvas() {
        DOMImplementation dOMImplementation = SVGDOMImplementation.getDOMImplementation();

        document = dOMImplementation.createDocument(svgNS, "svg", null);

        svgRoot = document.getDocumentElement();

        svgRoot.setAttributeNS(null, "width", "1000");
        svgRoot.setAttributeNS(null, "height", "450");
        String rocketDiameterStr = String.valueOf(rocketDiameter);
        String rocketLengthStr = String.valueOf(rocketDiameter);
        String xPositionStr = String.valueOf(xPosition);
        String yPositionStr = String.valueOf(yPosition);
        String yMotorPositionStr = String.valueOf(yMotorPosition);

        Element motorCase = document.createElementNS(svgNS, "rect");
        motorCase.setAttributeNS(null, "x", "50");
        motorCase.setAttributeNS(null, "y", yMotorPositionStr);
        motorCase.setAttributeNS(null, "width", rocketLengthStr);
        motorCase.setAttributeNS(null, "height", rocketDiameterStr);
        motorCase.setAttributeNS(null, "stroke", "black");
        motorCase.setAttributeNS(null, "fill", "#CCCCCC");
        motorCase.setAttribute("id", "motorCase");

        Element igniter = document.createElementNS(svgNS, "rect");
        igniter.setAttributeNS(null, "x", xPositionStr);
        igniter.setAttributeNS(null, "y", yPositionStr);
        igniter.setAttributeNS(null, "width", "30");
        igniter.setAttributeNS(null, "height", "20");
        igniter.setAttributeNS(null, "stroke", "black");
        igniter.setAttributeNS(null, "fill", "red");
        igniter.setAttribute("id", "igniter");

        svgRoot.appendChild(motorCase);
        svgRoot.appendChild(igniter);
        registerListeners("motorCase");
        drawCanvas.setDocument(document);

        //Number diameterNumb = Double.valueOf(motorCase.getAttribute("width").toString());
//        Number lengthNumb = Double.valueOf(motorCase.getAttribute("height").toString());
        rocketDiameterSp.setValue(rocketDiameter);
        rocketLengthSp.setValue(rocketLength);

    }

    private void setSpinner(JSpinner spinner) {
        JComponent comp = spinner.getEditor();
        JFormattedTextField field = (JFormattedTextField) comp.getComponent(0);
        DefaultFormatter formatter = (DefaultFormatter) field.getFormatter();
        formatter.setCommitsOnValidEdit(true);

//        spinner.addChangeListener(new ChangeListener() {
//
//            @Override
//            public void stateChanged(ChangeEvent e) {
//                
//            }
//        });
    }

    private void loadConfItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadConfItemActionPerformed
        JFileChooser chooserLoad = new JFileChooser();

        FileFilter loadFilter = new ExtensionFileFilter("Text Document(*.txt)", new String[]{"TXT"});
        chooserLoad.setFileFilter(loadFilter);

        int returnVal = chooserLoad.showOpenDialog(MainWindow.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = chooserLoad.getSelectedFile();
            readFromFile(file.getPath());
            //This is where oldLengthSection real application would open the file.
            //log.append("Opening: " + file.getName() + "." + newline);
        } else {
            //log.append("Open command cancelled by user." + newline);
        }
        //log.setCaretPosition(log.getDocument().getLength());

    }//GEN-LAST:event_loadConfItemActionPerformed

    void saveToFile() throws Exception {
        BufferedWriter outfile = new BufferedWriter(new FileWriter(yourFile + ".txt"));
        outfile.write("Rocket_Diameter=" + Double.parseDouble(rocketDiameterSp.getValue().toString()) + "\n");
        outfile.write("Rocket_Length=" + Double.parseDouble(rocketLengthSp.getValue().toString()) + "\n");
        System.out.println(rocketLengthSp.getValue().toString());
        outfile.close();
    }

    void readFromFile(String readingFilePath) {
        FileInputStream fis;
        String rocketDiameter;
        String rocketLength;

        try {
            fis = new FileInputStream(readingFilePath);
            Scanner scanner = new Scanner(fis);

            do {
                rocketDiameter = scanner.nextLine();
                rocketLength = scanner.nextLine();
            } while (scanner.hasNextLine());

            String rocketDiameterSub = rocketDiameter.substring(rocketDiameter.lastIndexOf("=") + 1);
            String rocketLengthSub = rocketLength.substring(rocketLength.lastIndexOf("=") + 1);
            rocketDiameterSp.setValue(new Integer(rocketDiameterSub));
            rocketLengthSp.setValue(new Integer(rocketLengthSub));
            scanner.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

//Read more: http://javarevisited.blogspot.com/2012/07/read-file-line-by-line-java-example-scanner.html#ixzz32pEnNHAw
//        try (BufferedReader br = new BufferedReader(new FileReader(readingFilePath))) {
//
//            String rocketDiameter;
//            String rocketLength;
//String sCurrentLine[];
//            while ((sCurrentLine = br.readLine()) != null) {
//				System.out.println(sCurrentLine);
//			}
//            do{
//                rocketDiameter = br.readLine();
//                rocketLength = br.readLine();
//            }
//            while (br.readLine().isEmpty()); {
//                
//            }
//            rocketDiameterSp.setValue(rocketDiameter.substring(rocketDiameter.lastIndexOf("=") + 1));
//            rocketLengthSp.setValue(rocketLength.substring(rocketLength.lastIndexOf("=") + 1));
//        } catch (IOException e) {
//            e.printStackTrace();
//        }

    private void saveConfItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfItemActionPerformed
        JFileChooser chooserSave = new JFileChooser();
        FileFilter saveFilter = new ExtensionFileFilter("Text Document (*.txt)", new String[]{"TXT"});
        chooserSave.setFileFilter(saveFilter);
        int returnVal = chooserSave.showSaveDialog(MainWindow.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            yourFile = chooserSave.getSelectedFile();
            try {
                saveToFile();
                //This is where oldLengthSection real application would save the file.
                //log.append("Saving: " + file.getName() + "." + newline);

            } catch (Exception ex) {
                Logger.getLogger(MainWindow.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            //log.append("Save command cancelled by user." + newline);
        }
        //log.setCaretPosition(log.getDocument().getLength());
    }//GEN-LAST:event_saveConfItemActionPerformed

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        //System.exit(0);
        dispose();
    }//GEN-LAST:event_exitItemActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void rocketDiameterSpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rocketDiameterSpStateChanged
//        rocketDiameter = (Double)rocketDiameterSp.getValue();
//        String rocketDiameterStr = String.valueOf(rocketDiameter);
        String rocketDiameter = rocketDiameterSp.getValue().toString();
        Double diam = (Double) rocketDiameterSp.getValue();
        Element motorCase = document.getElementById("motorCase");
        Double oldDiam = Double.valueOf(motorCase.getAttribute("height"));
        motorCase.setAttribute("height", rocketDiameter);
        yPosition = yMotorPosition + diam / 2 - 10;
        String yPositionStr = String.valueOf(yPosition);
        Element igniter = document.getElementById("igniter");
        igniter.setAttribute("y", yPositionStr);

        for (SectionInfo section : sectionList) {
            Double oldYPosition = section.getyPosition();
            Double newYPosition = yMotorPosition + diam / 2 - section.getNewOuterDiameter() / 2;

            Element target = document.getElementById(section.getSection_id());
            target.setAttribute("y", newYPosition.toString());
            section.setyPosition(newYPosition);

            Double newInnerPortYPosition = newYPosition = yMotorPosition + diam / 2 - section.getNewInnerDiameter() / 2;
            String innerPortName = "innerPort" + section.getSection_id().substring(section.getSection_id().length() - 1);

            Element targetInnerPort = document.getElementById(innerPortName);
            targetInnerPort.setAttribute("y", String.valueOf(newInnerPortYPosition.toString()));

        }
        drawCanvas.setDocument(document);
    }//GEN-LAST:event_rocketDiameterSpStateChanged

    private void rocketLengthSpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rocketLengthSpStateChanged
        String rocketLength = rocketLengthSp.getValue().toString();
        Element motorCase = document.getElementById("motorCase");
        motorCase.setAttribute("width", rocketLength);
        drawCanvas.setDocument(document);
    }//GEN-LAST:event_rocketLengthSpStateChanged

    private void addSectionBTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addSectionBTMouseClicked


    }//GEN-LAST:event_addSectionBTMouseClicked

    private void removeSectionBTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeSectionBTMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_removeSectionBTMouseClicked

    private void addSectionBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSectionBTActionPerformed
        //String diameterSectionStr;
        //String lengthSectionStr;
        final AddSectionPopup addSectionPopup = new AddSectionPopup();

        addSectionPopup.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                System.out.println(addSectionPopup.isOK);
                if (addSectionPopup.isOK) {

                    String diameterSectionStr = addSectionPopup.getDiameterSectionStr();
                    String lengthSectionStr = addSectionPopup.getLengthSectionStr();
                    String innerPortSectionString = addSectionPopup.getInnerPortSectionStr();

                    enableComponents((Container) sectionPropertiesTabbedPanel, true);
                    Double totalLength = 0.0;
                    for (SectionInfo section : sectionList) {
                        totalLength += section.getLengthSection();

                    }
                    lengthSection = Double.valueOf(lengthSectionStr);
                    String sectionName = "section" + sectionNo;
                    String innerPortName = "innerPort" + sectionNo;
                    sectionNo++;
                    Double diam = (Double) rocketDiameterSp.getValue();

                    //String xPositionSectionStr = String.valueOf(xPosition + totalLength);
                    //svgRoot = document.getElementsByTagName('svg');
                    String xPositionSectionStr = "";
                    String no = "";
                    int idx = sectionList.size();
                    if (selectedSomething != true) {
//                         if (selectedSection == null ) {
                        xPositionSectionStr = String.valueOf(xPosition + totalLength);
//                        }
//                         else{
//                        no = selectedSection.getSection_id().substring(selectedSection.getSection_id().length() - 1);
//                        xPositionSectionStr = String.valueOf(xPosition + totalLength);
//                         }
                    } else {
                        //idx = 0;
                        Double totalLengthBefore = 0.0;
                        Double currX = selectedSection.getxPosition();
                        Double currLength = selectedSection.getLengthSection();
                        xPositionSectionStr = String.valueOf(currX + currLength);
//                        for (SectionInfo thisSection : sectionList) {
//                            Double length = thisSection.getLengthSection();
//                            String sectionId = thisSection.getSection_id();
//                            
//                            totalLengthBefore += length;
//                            if (thisSection.getSection_id() == selectedSection.getSection_id()) {
//                                idx = sectionList.indexOf(thisSection);
//                                
//                                xPositionSectionStr = String.valueOf(xPosition + totalLengthBefore);
//                                break;
//                            }
//    
//                        }
                        for (SectionInfo thisSection : sectionList) {
                            if (thisSection.getSection_id() == selectedSection.getSection_id()) {
                                idx = sectionList.indexOf(thisSection) + 1;

                                break;
                            }
                        }
                        for (int i = idx; i < sectionList.size(); i++) {
                            SectionInfo thisSection = sectionList.get(i);
                            Element next_section = document.getElementById(thisSection.getSection_id());
                            String thisInnerPortName = "innerPort" + (thisSection.getSection_id().substring(thisSection.getSection_id().length() - 1));
                            System.out.println(thisSection.getSection_id());
                            System.out.println(innerPortName);
                            Double oldX = thisSection.getxPosition();

                            next_section.setAttribute("x", String.valueOf(oldX + lengthSection));

                            Element next_innerPort = document.getElementById(thisInnerPortName);
                            next_innerPort.setAttribute("x", String.valueOf(oldX + lengthSection));
                            thisSection.setxPosition(oldX + lengthSection);
                        }
                    }

                    String yPositionSectionStr = String.valueOf(yMotorPosition + (diam / 2.0) - (Double.valueOf(diameterSectionStr) / 2.0));
                    String yInnerPortPosition = String.valueOf((diam / 2.0) - (Double.valueOf(innerPortSectionString) / 2.0) + yMotorPosition);

                    int randomColor = new Random().nextInt(colors.length);

                    Element section = document.createElementNS(svgNS, "rect");
                    section.setAttributeNS(null, "x", xPositionSectionStr);
                    section.setAttributeNS(null, "y", yPositionSectionStr);
                    section.setAttributeNS(null, "width", lengthSectionStr);
                    section.setAttributeNS(null, "height", diameterSectionStr);
                    section.setAttributeNS(null, "stroke", "black");
                    section.setAttributeNS(null, "fill", colors[randomColor]);
                    section.setAttributeNS(null, "fill-opacity", "0.5");
                    section.setAttribute("id", sectionName);
                    //Node sectionNode = (Node) section;

                    //     xAddMoreSection = xAddMoreSection + lengthSection;
                    Element innerPort = document.createElementNS(svgNS, "rect");
                    innerPort.setAttributeNS(null, "x", xPositionSectionStr);
                    innerPort.setAttributeNS(null, "y", yInnerPortPosition);
                    innerPort.setAttributeNS(null, "width", lengthSectionStr);
                    innerPort.setAttributeNS(null, "height", innerPortSectionString);
                    innerPort.setAttributeNS(null, "stroke", "black");
                    innerPort.setAttributeNS(null, "fill", "grey");
                    innerPort.setAttributeNS(null, "fill-opacity", "0.8");
                    innerPort.setAttribute("id", innerPortName);
                    svgRoot.appendChild(section);
                    svgRoot.appendChild(innerPort);
                    drawCanvas.setDocument(document);
                    SectionInfo newSection = new SectionInfo(Double.valueOf(diameterSectionStr), Double.valueOf(innerPortSectionString), sectionName, innerPortName, lengthSection, Double.valueOf(xPositionSectionStr), Double.valueOf(yPositionSectionStr));
                    defaultDrawCircle(newSection);

                    //if(selectedSection==null) {
                    selectedSection = newSection;
                    sectionList.add(idx, newSection);
                    circleToggleButton.setSelected(true);
                    selectedSomething = true;
                    Element target = document.getElementById(selectedSection.getSection_id());
                    target.setAttribute("stroke-width", "2");
                    for (SectionInfo sec : sectionList) {

                        if (!sec.getSection_id().equalsIgnoreCase(selectedSection.getSection_id())) {

                            Element elm = document.getElementById(sec.getSection_id());
                            elm.setAttribute("stroke-width", "1");
                        }
                    }

                    setSectionInfoView();
                    //}

                    registerListeners(sectionName);
                    registerListeners(innerPortName);
                    System.out.println("inner port " + innerPortSectionString);

                    //selectedSomething = false;
                }
                addSectionPopup.dispose();
            }

        });

        addSectionPopup.setVisible(true);
        //System.out.println(diameterSectionStr);
    }//GEN-LAST:event_addSectionBTActionPerformed

    private void removeSectionBTActionPerformed(java.awt.event.ActionEvent evt) {
        String sectionId = selectedSection.getSection_id();
        String innerPortID = selectedSection.getInnerPort_id();
        Double lengthRemoveSection = selectedSection.getLengthSection();
        Element targetSection = document.getElementById(sectionId);
        Node targetSectionNode = (Node) targetSection;

        Element targetInnerPort = document.getElementById(innerPortID);
        Node targetInnerPortNode = (Node) targetInnerPort;

        targetSectionNode.getParentNode().removeChild(targetSectionNode);
        targetInnerPortNode.getParentNode().removeChild(targetInnerPortNode);
        drawCanvas.setDocument(document);

        int idx = 0;
        for (SectionInfo section : sectionList) {

            if (section.getSection_id() == selectedSection.getSection_id()) {
                idx = sectionList.indexOf(section);

            }

        }

        for (int i = idx + 1; i < sectionList.size(); i++) {
            SectionInfo section = sectionList.get(i);
            Element next_section = document.getElementById(section.getSection_id());

            String innerPortName = "innerPort" + section.getSection_id().substring(section.getSection_id().length() - 1);
            System.out.println(section.getSection_id());
            System.out.println(innerPortName);
            Double oldX = section.getxPosition();
            next_section.setAttribute("x", String.valueOf(oldX - lengthRemoveSection));

            Element next_innerPort = document.getElementById(innerPortName);
            next_innerPort.setAttribute("x", String.valueOf(oldX - lengthRemoveSection));
            section.setxPosition(oldX - lengthRemoveSection);
        }
        sectionList.remove(selectedSection);
    }

    private void findCenter(SectionInfo section) {
        SVGDocument document = section.getCADDoc();
        Element circle = document.getElementById("ID_8E0");
        section.setCx(Double.valueOf(circle.getAttribute("cx")));
        section.setCy(Double.valueOf(circle.getAttribute("cy")));
        Point center = new Point();
        center.setX(Double.valueOf(circle.getAttribute("cx")));
        center.setY(Double.valueOf(circle.getAttribute("cy")));
        section.setCenter(center);
    }

    private void setSectionInfoView() {
        DefaultTableModel model = (DefaultTableModel) propellantTable.getModel();
        model.setRowCount(0);
        List<PropellantLayer> layers = selectedSection.getLayers();
        //System.out.println(layers.size());
        for (int i = 0; i < layers.size(); i++) {
            PropellantLayer layer = layers.get(i);
            model.addRow(new Object[]{layer.getLayerId(), layer.getLayerName(), layer.getLayerMaterial()});
        }
        System.out.println(selectedSection.getNewOuterDiameter());
        outerDiameterSpinner.setValue(selectedSection.getNewOuterDiameter());
        innerDiameterSpinner.setValue(selectedSection.getNewInnerDiameter());
        lengthSectionSpinner.setValue(selectedSection.getLengthSection());

        propellantTable.setRowSelectionInterval(0, 0);
        setPropertiesView(layers.get(0));
        cadPanelShape.setDocument(selectedSection.getCADDoc());

    }

    private void setPropertiesView(PropellantLayer layer) {

        burningRateTB.setText(String.valueOf(layer.getBurningRate()));
        pressureExponentTB.setText(String.valueOf(layer.getPressureExponent()));
        densityTB.setText(String.valueOf(layer.getDensity()));
        alphaConstTB.setText(String.valueOf(layer.getBurningConst()));
        gasTempTB.setText(String.valueOf(layer.getGasTemp()));
        gasConstTB.setText(String.valueOf(layer.getGasConst()));
        heatRatioTB.setText(String.valueOf(layer.getHeatRatio()));
        maxBurntTB.setText(String.valueOf(layer.getMaxBurningDistance()));

        selectedLayer = layer;
    }

    private void rocketLengthSp1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rocketLengthSp1StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_rocketLengthSp1StateChanged

    private void rocketDiameterSp1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rocketDiameterSp1StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_rocketDiameterSp1StateChanged

    private void propellantTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_propellantTableMouseClicked

        DefaultTableModel model = (DefaultTableModel) propellantTable.getModel();
        int selectedRow = propellantTable.getSelectedRow();

        if (selectedRow != -1) {
            int selectedId = (int) model.getValueAt(selectedRow, 0);
            List<PropellantLayer> layers = selectedSection.getLayers();
            PropellantLayer layer = null;
            for (PropellantLayer propellantLayer : layers) {
                if (propellantLayer.getLayerId() == selectedId) {
                    layer = propellantLayer;
                }
            }

            setPropertiesView(layer);

        }
    }//GEN-LAST:event_propellantTableMouseClicked

    private void addPropellantBtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addPropellantBtMouseClicked
        PropellantLayer layer = selectedSection.addNewLayer();

        DefaultTableModel model = (DefaultTableModel) propellantTable.getModel();
        model.addRow(new Object[]{layer.getLayerId(), layer.getLayerName(), layer.getLayerMaterial()});

        setPropertiesView(layer);
    }//GEN-LAST:event_addPropellantBtMouseClicked

    private void removePropellantBtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removePropellantBtMouseClicked
        selectedSection.removeLayer(selectedLayer);
        DefaultTableModel model = (DefaultTableModel) propellantTable.getModel();
        int selectedRow = propellantTable.getSelectedRow();
        if (selectedRow != -1) {
            sectionList.remove(propellantTable.getSelectedRow());
            model.removeRow(propellantTable.getSelectedRow());

        }
        int totalRow = propellantTable.getRowCount();

        for (int countRow = 0; countRow < totalRow; countRow++) {
            model.setValueAt(countRow + 1, countRow, 0);

        }
    }//GEN-LAST:event_removePropellantBtMouseClicked

    private void savePropertiesBTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_savePropertiesBTMouseClicked
        selectedLayer.setBurningRate(Double.parseDouble(burningRateTB.getText()));
        selectedLayer.setPressureExponent(Double.parseDouble(pressureExponentTB.getText()));
        selectedLayer.setDensity(Double.parseDouble(densityTB.getText()));
        selectedLayer.setBurningConst(Double.parseDouble(alphaConstTB.getText()));
        selectedLayer.setGasTemp(Double.parseDouble(gasTempTB.getText()));
        selectedLayer.setGasConst(Double.parseDouble(gasConstTB.getText()));
        selectedLayer.setHeatRatio(Double.parseDouble(heatRatioTB.getText()));
        selectedLayer.setMaxBurningDistance(Double.parseDouble(maxBurntTB.getText()));
    }//GEN-LAST:event_savePropertiesBTMouseClicked

    private void savePropertiesBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePropertiesBTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_savePropertiesBTActionPerformed

    private void circleToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_circleToggleButtonItemStateChanged
        String path = "dti/image/DTICircle.dxf";

        if (circleToggleButton.isSelected()) {
            setCADShape(path);
            showSVG(cadPanelShape);
            findCenter(selectedSection);
            selectedSection.setIsCircle(true);
            cad.setInnerShape(selectedSection.getNewInnerDiameter(), cadPanelShape, selectedSection.getCADDoc());
            cad.setOuterShape(selectedSection.getNewOuterDiameter(), cadPanelShape, selectedSection.getCADDoc());
            selectedSection.zoomLevel = 1.0;
    }//GEN-LAST:event_circleToggleButtonItemStateChanged
    }

    private void defaultDrawCircle(SectionInfo section) {
        String path = "dti/image/DTICircle.dxf";

        setCADShape(path);
        section.setCADDoc(cad.outputSVG());
        findCenter(section);
        section.setIsCircle(true);
        cad.setInnerShape(section.getNewInnerDiameter(), cadPanelShape, section.getCADDoc());
        cad.setOuterShape(section.getNewOuterDiameter(), cadPanelShape, section.getCADDoc());
        section.zoomLevel = 1.0;
    }
    private void wheelToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_wheelToggleButtonItemStateChanged
        String path = "dti/image/DTIWheel.dxf";
        setCADShape(path);

        showSVG(cadPanelShape);
        findCenter(selectedSection);
        cad.extractInnerPort(selectedSection.getCADDoc(), selectedSection.getPoints());
        selectedSection.setIsCircle(false);
        selectedSection.zoomLevel = 1.0;
    }//GEN-LAST:event_wheelToggleButtonItemStateChanged

    private void starToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_starToggleButtonItemStateChanged
        String path = "dti/image/DTIStar.dxf";
        setCADShape(path);
        showSVG(cadPanelShape);
        findCenter(selectedSection);
        cad.rearrangePath(selectedSection.getCADDoc());
        cad.extractInnerPort(selectedSection.getCADDoc(), selectedSection.getPoints());
        cad.resizeInnerPort(selectedSection.getCenter(), selectedSection.getNewInnerDiameter(), selectedSection.getPoints(), selectedSection.getCADDoc());
        cadPanelShape.setSVGDocument(selectedSection.getCADDoc());
        selectedSection.setIsCircle(false);
        selectedSection.zoomLevel = 1.0;
    }//GEN-LAST:event_starToggleButtonItemStateChanged

    private void hexaToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hexaToggleButtonItemStateChanged
        String path = "dti/image/DTIHexagon.dxf";
        setCADShape(path);
        showSVG(cadPanelShape);
        findCenter(selectedSection);
        selectedSection.setIsCircle(false);
        selectedSection.zoomLevel = 1.0;
    }//GEN-LAST:event_hexaToggleButtonItemStateChanged

    private void pentaToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pentaToggleButtonItemStateChanged
        String path = "dti/image/DTIPentagon.dxf";
        setCADShape(path);
        showSVG(cadPanelShape);
        findCenter(selectedSection);
        selectedSection.setIsCircle(false);
        selectedSection.zoomLevel = 1.0;
    }//GEN-LAST:event_pentaToggleButtonItemStateChanged

    private void eightStarToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {
        String path = "dti/image/DTIEightStar.dxf";
        setCADShape(path);
        showSVG(cadPanelShape);
        findCenter(selectedSection);
        selectedSection.setIsCircle(false);
        selectedSection.zoomLevel = 1.0;
    }

    private void zoomInButtonActionPerformed(java.awt.event.ActionEvent evt) {
        
        cad.zoom(cadPanelShape, selectedSection.getCADDoc(), selectedSection.zoomLevel+0.1);
        selectedSection.zoomLevel = selectedSection.zoomLevel + 0.1;
    }
    
    private void zoomOutButtonActionPerformed(java.awt.event.ActionEvent evt) {
        cad.zoom(cadPanelShape, selectedSection.getCADDoc(), selectedSection.zoomLevel-0.1);
        selectedSection.zoomLevel = selectedSection.zoomLevel - 0.1;
    }
    private void innerDiameterSpinStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_innerDiameterSpinStateChanged
        // newInnerDiameter = (Integer)innerDiameterSpinner.getValue();
        Double newInnerDiameter = (Double) innerDiameterSpinner.getValue();
        String newInnerDiameterStr = innerDiameterSpinner.getValue().toString();
        Double diam = (Double) rocketDiameterSp.getValue();
        String yInnerPortPosition = String.valueOf((diam / 2.0) - (Double.valueOf(newInnerDiameterStr) / 2.0) + yMotorPosition);

        Element innerPort = document.getElementById(selectedSection.getInnerPort_id());
        innerPort.setAttribute("height", newInnerDiameterStr);
        innerPort.setAttribute("y", yInnerPortPosition);

        drawCanvas.setDocument(document);
        selectedSection.setNewInnerDiameter(newInnerDiameter);
        if (circleToggleButton.isSelected()) {
            cad.setInnerShape(newInnerDiameter, cadPanelShape, selectedSection.getCADDoc());
        }
    }//GEN-LAST:event_innerDiameterSpinStateChanged

    private void outerDiameterSpinStateChanged(javax.swing.event.ChangeEvent evt) {

        Double newOuterDiameter = (Double) outerDiameterSpinner.getValue();
        String newOuterDiameterStr = outerDiameterSpinner.getValue().toString();
        Double diam = (Double) rocketDiameterSp.getValue();
        String ySectionPosition = String.valueOf(yMotorPosition + (diam / 2.0) - (Double.valueOf(newOuterDiameterStr) / 2.0));
        Element section = document.getElementById(selectedSection.getSection_id());

        section.setAttributeNS(null, "height", newOuterDiameterStr);
        section.setAttribute("y", ySectionPosition);

        drawCanvas.setDocument(document);
        selectedSection.setNewOuterDiameter(newOuterDiameter);
        if (circleToggleButton.isSelected()) {
            cad.setOuterShape(newOuterDiameter, cadPanelShape, selectedSection.getCADDoc());
        }
    }

    private void lengthSpinStateChanged(javax.swing.event.ChangeEvent evt) {

        Double newLengthSection = (Double) lengthSectionSpinner.getValue();
        Double oldLengthSection = selectedSection.getLengthSection();
        Double diff = newLengthSection - oldLengthSection;
        selectedSection.setLengthSection(newLengthSection);
        String newLengthSectionStr = selectedSection.getLengthSection().toString();

        Double diam = (Double) rocketDiameterSp.getValue();

        // String yPositionSectionStr = String.valueOf(yMotorPosition + (diam / 2.0) - (Double.valueOf(newOuterDiameterStr) / 2.0));
        //String newX = String.valueOf(selectedSection.getxPosition() + diff);
        Element thisSection = document.getElementById(selectedSection.getSection_id());
        thisSection.setAttribute("width", newLengthSectionStr);

        String thisInnerPortName = "innerPort" + selectedSection.getSection_id().substring(selectedSection.getSection_id().length() - 1);
        Element this_innerPort = document.getElementById(thisInnerPortName);
        this_innerPort.setAttribute("width", newLengthSectionStr);
        //int rowNo = selectedSection.getRowNo();
        int idx = 0;
        for (SectionInfo section : sectionList) {

            if (section.getSection_id() == selectedSection.getSection_id()) {
                idx = sectionList.indexOf(section);

            }

        }
        for (int i = idx + 1; i < sectionList.size(); i++) {
            SectionInfo section = sectionList.get(i);
            Element next_section = document.getElementById(section.getSection_id());
            String innerPortName = "innerPort" + section.getSection_id().substring(section.getSection_id().length() - 1);
            System.out.println(section.getSection_id());
            System.out.println(innerPortName);
            Double oldX = section.getxPosition();
            next_section.setAttribute("x", String.valueOf(oldX + diff));

            Element next_innerPort = document.getElementById(innerPortName);
            next_innerPort.setAttribute("x", String.valueOf(oldX + diff));
            section.setxPosition(oldX + diff);
        }

        //selectedSection.setLengthSection(lengthSection);
        drawCanvas.setDocument(document);
    }
    private void innerDiameterSpinInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_innerDiameterSpinInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_innerDiameterSpinInputMethodTextChanged

    public void setCADShape(String path) {
        cad.parseFile(path);

    }

    public void showSVG(JSVGCanvas canvas) {
        selectedSection.setCADDoc(cad.outputSVG());
        canvas.setSVGDocument(selectedSection.getCADDoc());
    }

    public void enableComponents(Container container, boolean enable) {
        Component[] components = container.getComponents();
        for (Component component : components) {
            component.setEnabled(enable);
            if (component instanceof Container) {
                enableComponents((Container) component, enable);
            }
        }
    }

    class ExtensionFileFilter extends FileFilter {

        String description;

        String extensions[];

        public ExtensionFileFilter(String description, String extension) {
            this(description, new String[]{extension});
        }

        public ExtensionFileFilter(String description, String extensions[]) {
            if (description == null) {
                this.description = extensions[0];
            } else {
                this.description = description;
            }
            this.extensions = (String[]) extensions.clone();
            toLower(this.extensions);
        }

        private void toLower(String array[]) {
            for (int i = 0, n = array.length; i < n; i++) {
                array[i] = array[i].toLowerCase();
            }
        }

        public String getDescription() {
            return description;
        }

        public boolean accept(File file) {
            if (file.isDirectory()) {
                return true;
            } else {
                String path = file.getAbsolutePath().toLowerCase();
                for (int i = 0, n = extensions.length; i < n; i++) {
                    String extension = extensions[i];
                    if ((path.endsWith(extension) && (path.charAt(path.length() - extension.length() - 1)) == '.')) {
                        return true;
                    }
                }
            }
            return false;
        }

    }

    /**
     * @param args the command line arguments
     */
    File yourFile;
    SpinnerNumberModel diameterSpinnerNumberModel;
    SpinnerNumberModel lengthSpinnerNumberModel;

    SpinnerNumberModel diameterSectionSpinnerNumberModel;
    SpinnerNumberModel lengthSectionSpinnerNumberModel;
    SpinnerNumberModel innerDiameterSectionSpinnerNumberModel;
    public JSVGCanvas drawCanvas = new JSVGCanvas();
    public Document document;
    public String svgNS = SVGDOMImplementation.SVG_NAMESPACE_URI;
    Element svgRoot;
    Double rocketDiameter = 50.0;
    Double rocketLength = 100.0;
    Double xPosition = 50.0;
    Double yPosition = 65.0;
    Double yMotorPosition = 50.0;
    Double diameterSection = 0.0;
    Double lengthSection = 0.0;
    Double xAddMoreSection = 0.0;
    int sectionNo = 0;
    AddSectionPopup addSectionPopup;

    Boolean selectedSomething = false;
    double newInnerDiameter;

    List<SectionInfo> sectionList = new ArrayList<SectionInfo>();
    //List<SizeOfShape> sizeOfShapesList = new ArrayList<SizeOfShape>();
    ByteArrayInputStream inputStream;
    SpinnerNumberModel outerSpinnerNumberModel;
    SpinnerNumberModel innerSpinnerNumberModel;
    private CAD cad = new CAD();
    byte[] data;
    private SectionInfo selectedSection;
    private PropellantLayer selectedLayer;
    // Variables declaration - do not modify
    private javax.swing.JButton addPropellantBt;
    private javax.swing.JButton addSectionBT;
    private javax.swing.JTextField alphaConstTB;
    private javax.swing.JTextField burningRateTB;
    private JSVGCanvas cadPanelShape = new JSVGCanvas();
    private javax.swing.JToggleButton circleToggleButton;
    private javax.swing.JTextField densityTB;
    private javax.swing.JLabel diameterInner;
    //private javax.swing.JPanel drawCanvas;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTextField gasConstTB;
    private javax.swing.JTextField gasTempTB;
    private javax.swing.JPanel geometricTab;
    private javax.swing.JTextField heatRatioTB;
    private javax.swing.JTextField maxBurntTB;
    private javax.swing.JToggleButton hexaToggleButton;
    private javax.swing.JSpinner innerDiameterSpinner;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel burningRateLB;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel pressureExponentLB;
    private javax.swing.JLabel densityLB;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel alphaConstLB;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel gasConstLB;
    private javax.swing.JLabel gasTempLB;
    private javax.swing.JLabel heatRatioLB;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel maxBurntLB;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner outerDiameterSpinner;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JSpinner jSpinner4;
    private javax.swing.JSpinner jSpinner5;
    private javax.swing.JSpinner jSpinner6;
    private javax.swing.JSpinner jSpinner7;
    private javax.swing.JTabbedPane sectionPropertiesTabbedPanel;
    private javax.swing.JMenuItem loadConfItem;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JTabbedPane mainTabbedPanel;
    private javax.swing.JLabel mmLabel;
    private javax.swing.JLabel mmLabel1;
    private javax.swing.JToggleButton pentaToggleButton;
    private javax.swing.JTextField pressureExponentTB;
    private javax.swing.JPanel propellantPanel;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JTable propellantTable;
    private javax.swing.JButton removePropellantBt;
    private javax.swing.JButton removeSectionBT;
    private javax.swing.JSpinner rocketDiameterSp;
    private javax.swing.JSpinner rocketDiameterSp1;
    private javax.swing.JSpinner rocketLengthSp;
    private javax.swing.JSpinner rocketLengthSp1;
    private javax.swing.JMenuItem saveConfItem;
    private javax.swing.JButton savePropertiesBT;
    private javax.swing.JPanel simulationTab;
    private javax.swing.JToggleButton starToggleButton;
    private javax.swing.JToggleButton wheelToggleButton;
    private javax.swing.JToggleButton eightStarToggleButton;
    private javax.swing.JLabel lengthLB;
    private javax.swing.JLabel mmLengthLabel;
    private javax.swing.JSpinner lengthSectionSpinner;
    private javax.swing.JLabel startBurningDistanceLb;
    private javax.swing.JTextField startBurningDistanceTb;
    private javax.swing.JButton zoomInPropellantBt;
    private javax.swing.JButton zoomOutPropellantBt;
    
    private javax.swing.JPanel leftGeoPanel;
    private javax.swing.JPanel rigthGeoPanel;
    // End of variables declaration    
    String[] colors = {"blue", "green", "yellow", "pink"};
}
